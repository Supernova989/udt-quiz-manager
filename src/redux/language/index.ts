import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import * as Yup from "yup";

export const languageSchema = Yup.object({
  id: Yup.number().required(),
  order: Yup.number().required(),
  total: Yup.number().required(),
  title: Yup.string().max(64).required(),
});

export type Language = Yup.InferType<typeof languageSchema>;

export interface LanguageState {
  items: Language[];
}

const initialState: LanguageState = {
  items: [],
};

export const languageSlice = createSlice({
  name: "language",
  initialState,
  reducers: {
    set: (state, { payload }: PayloadAction<Language[]>) => {
      state.items = payload;
    },
    add: (state, { payload }: PayloadAction<Language>) => {
      state.items.push(payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = "loading";
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = "idle";
    //     state.value += action.payload;
    //   });
  },
});


export default languageSlice.reducer;
